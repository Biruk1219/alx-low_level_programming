!<arch>
0-isupper.c/    0           0     0     644     269       `
#include "main.h"

/**
 * _isupper - checks if parameter is an uppercase character.
 * @c: input character.
 * Return: 1 if is an uppercase character, 0 in other case.
 */

int _isupper(int c)

{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     325       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte,
 * @s: memory area.
 * @b: constant byte.
 * @n: bytes filled.
 * Return: the pointer to dest.
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int initial;

	for (initial = 0; initial < n; initial++)
	*(s + initial) =  b;

	return (s);
}

0-strcat.c/     0           0     0     644     409       `
#include "main.h"
#include <stdio.h>

/**
 *_strcat - concatenates two strings,
 *@dest: destination.
 *@src: source.
 *Return: the pointer to dest.
 */

char *_strcat(char *dest, char *src)
{
	int loop = 0, loop2 = 0;

	while (*(dest + loop) != '\0')
	{
		loop++;
	}
	while (loop2 >= 0)
	{
		*(dest + loop) = *(src + loop2);
		if (*(src + loop2) == '\0')
			break;
		loop++;
		loop2++;
	}
	return (dest);
}


100-atoi.c/     0           0     0     644     633       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi - converts a string to an integer.
 * @s: input string.
 * Return: integer.
 */
int _atoi(char *s)
{
	unsigned int length = 0, size = 0, oi = 0, pn = 1, m = 1, initial;

	while (*(s + length) != '\0')
	{
		if (size > 0 && (*(s + length) < '0' || *(s + length) > '9'))
			break;

		if (*(s + length) == '-')
			pn *= -1;

		if ((*(s + length) >= '0') && (*(s + length) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;
		}
		length++;
	}

	for (initial = length - size; initial < length; initial++)
	{
		oi = oi + ((*(s + initial) - 48) * m);
		m /= 10;
	}
	return (oi * pn);
}


1-isdigit.c/    0           0     0     644     261       `
#include "main.h"

/**
 * _isdigit - checks if parameter is a number between 0 to 9.
 * @c: input number.
 * Return: 1 if is a number (0 to 9), 0 in other case.
 */
int _isdigit(int c)

{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     359       `
#include "main.h"

/**
 * _memcpy - copies memory area,
 * @dest: destination memory area.
 * @src: source memory area.
 * @n: bytes filled.
 * Return: the pointer to dest.
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int initial;

	for (initial = 0; initial < n; initial++)
	*(dest + initial) =  *(src + initial);

	return (dest);
}

1-strncat.c/    0           0     0     644     454       `
#include "main.h"
#include <stdio.h>

/**
 *_strncat - concatenates two strings,
 *@dest: destination.
 *@src: source.
 *@n: amount of bytes used from src.
 *Return: the pointer to dest.
 */

char *_strncat(char *dest, char *src, int n)
{
	int loop = 0, loop2 = 0;

	while (*(dest + loop) != '\0')
	{
		loop++;
	}
	while (loop2 < n)
	{
		*(dest + loop) = *(src + loop2);
		if (*(src + loop2) == '\0')
			break;
		loop++;
		loop2++;
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     395       `
#include "main.h"

/**
 * _strchr - locates a character in a string,
 * @s: string.
 * @c: character.
 * Return: the pointer to the first occurrence of the character c.
 */

char *_strchr(char *s, char c)
{
	unsigned int initial = 0;

	for (; *(s + initial) != '\0'; initial++)
	if (*(s + initial) == c)
	return (s + initial);
	if (*(s + initial) == c)
	return (s + initial);
	return ('\0');
}


2-strlen.c/     0           0     0     644     267       `
#include "main.h"
#include <stdio.h>

/**
 * _strlen - returns the length of a string.
 * @s: input string.
 * Return: length of a string.
 */
int _strlen(char *s)
{
	int word_length = 0;

	while (*(s + word_length) != '\0')
		++word_length;
	return (word_length);
}

2-strncpy.c/    0           0     0     644     353       `
#include "main.h"
#include <stdio.h>

/**
 *_strncpy - copies a string
 *@dest: destination.
 *@src: source.
 *@n: amount of bytes from src.
 *Return: the pointer to dest.
 */

char *_strncpy(char *dest, char *src, int n)
{
	int x;

	for (x = 0; x < n && src[x] != '\0'; x++)
	dest[x] = src[x];
	for ( ; x < n; x++)
	dest[x] = '\0';

	return (dest);
}


3-islower.c/    0           0     0     644     326       `
#include "main.h"

/**
 * _islower - Shows 1 if the input is a
 * lowercase character. Another cases, shows
 * 0
 *
 * @c: The character in ASCII code
 *
 * Return: 1 for lowercase character. 0 for the rest.
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

3-puts.c/       0           0     0     644     240       `
#include "main.h"
#include <stdio.h>

/**
 * _puts - prints a string
 * @str: string to print
 */

void _puts(char *str)
{
	int initial = 0;

	while (*(str + initial) != '\0')
	{
		putchar(*(str + initial));
		initial++;
	}
	putchar(10);
}
3-strcmp.c/     0           0     0     644     374       `
#include "main.h"
#include <stdio.h>

/**
 *_strcmp - compares two strings
 *@s1: first string.
 *@s2: second string.
 *Return: 0 if s1 and s2 are equals,
 *another number if not.
 */

int _strcmp(char *s1, char *s2)
{
	int x = 0, y = 0;

	while (y == 0)
	{
		if ((*(s1 + x) == '\0') && (*(s2 + x) == '\0'))
			break;
		y = *(s1 + x) - *(s2 + x);
		x++;
	}

	return (y);
}

3-strspn.c/     0           0     0     644     440       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 * @s: initial segment.
 * @accept: accepted bytes.
 * Return: the number of accepted bytes.
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j, a;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		a = 1;
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
			{
				a = 0;
				break;
			}
		}
		if (a == 1)
			break;
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     323       `
#include "main.h"

/**
 * _isalpha - Shows 1 if the input is a
 * letter Another cases, shows 0
 *
 * @c: The character in ASCII code
 *
 * Return: 1 for letters. 0 for the rest.
 */
int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}


4-strpbrk.c/    0           0     0     644     466       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: first string.
 * @accept: second string.
 * Return: a pointer to the byte in s that matches one of the
 * bytes in accept, or NULL if no such byte is found.
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
			return (s + i);
		}
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     621       `
#include "main.h"

/**
 * _strstr - finds the first occurrence of the substring.
 * needle in the string haystack.
 * @haystack: entire string.
 * @needle: substring.
 * Return: pointer to the beginning of located substring or
 * NULL if the substring is not found.
 */
char *_strstr(char *haystack, char *needle)
{
	char *bhaystack;
	char *pneedle;

	while (*haystack != '\0')
	{
		bhaystack = haystack;
		pneedle = needle;
		while (*haystack != '\0' && *pneedle != '\0' && *haystack == *pneedle)
		{
			haystack++;
			pneedle++;
		}
		if (!*pneedle)
		return (bhaystack);
		haystack = bhaystack + 1;
	}
	return (0);
}


6-abs.c/        0           0     0     644     235       `
#include "main.h"

/**
 * _abs - Computes the absolute value
 * of an integer.
 *
 * @i: input number as an integer.
 *
 * Return: absolute value
 */
int _abs(int i)
{
	if (i >= 0)
	{
		return (i);
	}
	else
	{
		return (i * -1);
	}
}


9-strcpy.c/     0           0     0     644     359       `
#include "main.h"
#include <stdio.h>

/**
 * _strcpy - copies the string pointed to by s
 * @dest: destination.
 * @src: source.
 * Return: the pointer to dest.
 */
char *_strcpy(char *dest, char *src)
{
	int length = 0;

	while (length >= 0)
	{
		*(dest + length) = *(src + length);
		if (*(src + length) == '\0')
			break;
		length++;
	}
	return (dest);
}


_putchar.c/     0           0     0     644     249       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout.
 * @c: The character to print.
 *
 * Return: On success 1
 * On error, -1 is returned, and errno is set appropriately.
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}

